package: yast

import:
- fmt
- strconv
- strings
- "github.com/infobloxopen/themis/pdp"

errors:
- id: externalError
  fields:
  - id: err
    type: error
  msg: "%s"
  args:
  - field: err

- id: rootKeysError
  fields:
  - id: keys
    type: map[interface{}]interface{}
  msg: "Expected type, attribute definitions and policies but got: %s"
  args:
  - snippet:
      result: s
      code: |
        keys := make([]string, len(e.keys))
        i := 0
        for key := range e.keys {
        	if s, ok := key.(string); ok {
        		keys[i] = fmt.Sprintf("%q", s)
        	} else {
        		keys[i] = fmt.Sprintf("%v", key)
        	}
        	i++
        }
        s := strings.Join(keys, ", ")

- id: stringError
  fields:
  - id: v
    type: interface{}
  - id: desc
    type: string
  msg: "Expected %s but got %T"
  args:
  - field: desc
  - field: v

- id: missingStringError
  fields:
  - id: desc
    type: string
  msg: "Missing %s"
  args:
  - field: desc

- id: integerError
  fields:
  - id: v
    type: interface{}
  - id: desc
    type: string
  msg: "Expected %s but got %T"
  args:
  - field: desc
  - field: v

- id: floatError
  fields:
  - id: v
    type: interface{}
  - id: desc
    type: string
  msg: "Expected %s but got %T"
  args:
  - field: desc
  - field: v

- id: integerUint64OverflowError
  fields:
  - id: v
    type: uint64
  - id: desc
    type: string
  msg: "%d overflows %s"
  args:
  - field: v
  - field: desc

- id: integerFloat64OverflowError
  fields:
  - id: v
    type: float64
  - id: desc
    type: string
  msg: "%f overflows %s"
  args:
  - field: v
  - field: desc

- id: mapError
  fields:
  - id: v
    type: interface{}
  - id: desc
    type: string
  msg: "Expected %s but got %T"
  args:
  - field: desc
  - field: v

- id: missingMapError
  fields:
  - id: desc
    type: string
  msg: "Missing %s"
  args:
  - field: desc

- id: listError
  fields:
  - id: v
    type: interface{}
  - id: desc
    type: string
  msg: "Expected %s but got %T"
  args:
  - field: desc
  - field: v

- id: missingListError
  fields:
  - id: desc
    type: string
  msg: "Missing %s"
  args:
  - field: desc

- id: policyAmbiguityError
  msg: "Expected rules (for policy) or policies (for policy set) but got both"

- id: policyMissingKeyError
  msg: "Expected rules (for policy) or policies (for policy set) but got nothing"

- id: unknownRCAError
  fields:
  - id: alg
    type: string
  msg: "Unknown rule combinig algorithm \"%s\""
  args:
  - field: alg

- id: missingRCAError
  msg: "Missing policy combinig algorithm"

- id: invalidRCAError
  fields:
  - id: v
    type: interface{}
  msg: "Expected string or map as policy combinig algorithm but got %T"
  args:
  - field: v

- id: missingMapRCAParamError
  msg: "Missing map parameter"

- id: missingDefaultRuleRCAError
  fields:
  - id: ID
    type: string
  msg: "No rule with ID %q to use as default rule"
  args:
  - field: ID

- id: missingErrorRuleRCAError
  fields:
  - id: ID
    type: string
  msg: "No rule with ID %q to use as on error rule"
  args:
  - field: ID

- id: unknownMapperPCAOrder
  fields:
  - id: ord
    type: string
  msg: "Unknown policy ordering for mapper \"%s\""
  args:
  - field: ord

- id: unknownMapperRCAOrder
  fields:
  - id: ord
    type: string
  msg: "Unknown rule ordering for mapper \"%s\""
  args:
  - field: ord

- id: notImplementedRCAError
  fields:
  - id: ID
    type: string
  msg: "Parsing for %q rule combinig algorithm hasn't been implemented yet"
  args:
  - field: ID

- id: unknownPCAError
  fields:
  - id: alg
    type: string
  msg: "Unknown policy combinig algorithm \"%s\""
  args:
  - field: alg

- id: missingPCAError
  msg: "Missing policy combinig algorithm"

- id: invalidPCAError
  fields:
  - id: v
    type: interface{}
  msg: "Expected string or map as policy combinig algorithm but got %T"
  args:
  - field: v

- id: missingMapPCAParamError
  msg: "Missing map parameter"

- id: missingDefaultPolicyPCAError
  fields:
  - id: ID
    type: string
  msg: "No policy with ID %q to use as default policy"
  args:
  - field: ID

- id: missingErrorPolicyPCAError
  fields:
  - id: ID
    type: string
  msg: "No policy with ID %q to use as on error policy"
  args:
  - field: ID

- id: notImplementedPCAError
  fields:
  - id: ID
    type: string
  msg: "Parsing for %q policy combinig algorithm hasn't been implemented yet"
  args:
  - field: ID

- id: mapperArgumentTypeError
  fields:
  - id: actual
    type: pdp.Type
  msg: "Expected %s, %s, %s or flags as argument but got %s"
  args:
  - expr: pdp.TypeString
  - expr: pdp.TypeSetOfStrings
  - expr: pdp.TypeListOfStrings
  - field: actual

- id: conditionTypeError
  fields:
  - id: t
    type: pdp.Type
  msg: "Expected %q as condition expression result but got %q"
  args:
  - expr: pdp.TypeBoolean
  - field: t

- id: unknownEffectError
  fields:
  - id: e
    type: string
  msg: "Unknown rule effect %q"
  args:
  - field: e

- id: noSMPItemsError
  fields:
  - id: desc
    type: string
  - id: n
    type: int
  msg: "Expected at least one entry in %s got %d"
  args:
  - field: desc
  - field: n

- id: tooManySMPItemsError
  fields: 
  - id: desc
    type: string
  - id: n
    type: int
  msg: "Expected only one entry in %s got %d"
  args:
  - field: desc
  - field: n

- id: unknownMatchFunctionError
  fields:
  - id: ID
    type: string
  msg: "Unknown match function %q"
  args:
  - field: ID

- id: matchFunctionCastError
  fields:
  - id: ID
    type: string
  - id: first
    type: pdp.Type
  - id: second
    type: pdp.Type
  msg: "No function %s for arguments %s and %s"
  args:
  - field: ID
  - field: first
  - field: second

- id: matchFunctionArgsNumberError
  fields:
  - id: n
    type: int
  msg: "Expected two arguments got %d"
  args:
  - field: n

- id: invalidMatchFunctionArgError
  fields:
  - id: expr
    type: pdp.Expression
  msg: "Expected one immediate value and one attribute got %T"
  args:
  - field: expr

- id: matchFunctionBothValuesError
  msg: "Expected one immediate value and one attribute got both immediate values"

- id: matchFunctionBothAttrsError
  msg: "Expected one immediate value and one attribute got both immediate values"

- id: unknownFunctionError
  fields:
  - id: ID
    type: string
  msg: "Unknown function %q"
  args:
  - field: ID

- id: functionCastError
  fields:
  - id: ID
    type: string
  - id: exprs
    type: "[]pdp.Expression"
  msg: "Can't find function %s which takes %s"
  args:
  - field: ID
  - snippet:
      result: args
      code: |
        args := ""
        if len(e.exprs) > 1 {
        	t := make([]string, len(e.exprs))
        	for i, e := range e.exprs {
        		t[i] = strconv.Quote(e.GetResultType().String())
        	}
        	args = fmt.Sprintf("%d arguments of following types %s", len(e.exprs), strings.Join(t, ", "))
        } else if len(e.exprs) > 0 {
        	args = fmt.Sprintf("argument of type %q", e.exprs[0].GetResultType())
        } else {
                args = "no arguments"
        }

- id: unknownAttributeError
  fields:
  - id: ID
    type: string
  msg: "Unknown attribute %q"
  args:
  - field: ID

- id: unknownMetaTypeError
  fields:
  - id: meta
    type: string
  msg: "Unknown meta type %q"
  args:
  - field: meta

- id: unknownTypeError
  fields:
  - id: t
    type: string
  msg: "Unknown type %q"
  args:
  - field: t

- id: invalidTypeError
  fields:
  - id: t
    type: pdp.Type
  msg: "Can't make value of %q type"
  args:
  - field: t

- id: missingContentError
  msg: "Missing value content"

- id: notImplementedValueTypeError
  fields:
  - id: t
    type: pdp.Type
  msg: "Parsing for type %q hasn't been implemented yet"
  args:
  - field: t

- id: invalidAddressError
  fields:
  - id: s
    type: string
  msg: "Expected value of address type but got %q"
  args:
  - field: s

- id: invalidNetworkError
  fields:
  - id: s
    type: string
  - id: err
    type: error
  msg: "Expected value of network type but got %q (%v)"
  args:
  - field: s
  - field: err

- id: invalidDomainError
  fields:
  - id: s
    type: string
  - id: err
    type: error
  msg: "Expected value of domain type but got %q (%v)"
  args:
  - field: s
  - field: err

- id: selectorURIError
  fields:
  - id: uri
    type: string
  - id: err
    type: error
  msg: "Expected seletor URI but got %q (%s)"
  args:
  - field: uri
  - field: err

- id: entityAmbiguityError
  fields:
  - id: fields
    type: "[]string"
  msg: "Expected rules (for policy), policies (for policy set) or effect (for rule) but got %s"
  args:
  - expr: strings.Join(e.fields, ", ")

- id: entityMissingKeyError
  msg: "Expected rules (for policy), policies (for policy set) or effect (for rule) but got nothing"

- id: unknownPolicyUpdateOperationError
  fields:
  - id: op
    type: string
  msg: "Unknown policy update operation %q"
  args:
  - field: op

- id: invalidPolicyUpdatePathElementError
  fields:
  - id: v
    type: interface{}
  - id: idx
    type: int
  msg: "Expected string as %d path element but got %T"
  args:
  - field: idx
  - field: v

- id: unknownFlagNameError
  fields:
  - id: name
    type: string
  - id: t
    type: "*pdp.FlagsType"
  msg: "Type %q doesn't have flag %q"
  args:
  - field: t
  - field: name
