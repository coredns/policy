commit 4af819d8b77ec6ae0242406474cd143c34f5aa03
Author: Yue Ko <yko@infoblox.com>
Date:   Thu Mar 15 11:44:26 2018 -0400

    Move flag.Parse() to main()
    
    Move flag.Parse() to main() so that other packages can use init()
    to create flags just like config.go

diff --git a/pdpserver/config.go b/pdpserver/config.go
index 28292b21..4b189558 100644
--- a/pdpserver/config.go
+++ b/pdpserver/config.go
@@ -23,7 +23,9 @@ var policyParsers = map[string]ast.Parser{
 }
 
 type config struct {
+	logVerbosity        int
 	policy              string
+	policyFmt           string
 	policyParser        ast.Parser
 	content             stringSet
 	serviceEP           string
@@ -31,6 +33,7 @@ type config struct {
 	tracingEP           string
 	healthEP            string
 	profilerEP          string
+	memLimit            uint64
 	mem                 server.MemLimits
 	maxStreams          uint
 	memStatsLogPath     string
@@ -54,16 +57,16 @@ func (s *stringSet) Set(v string) error {
 var conf config
 
 func init() {
-	verbose := flag.Int("v", 1, "log verbosity (0 - error, 1 - warn (default), 2 - info, 3 - debug)")
+	flag.IntVar(&conf.logVerbosity, "v", 1, "log verbosity (0 - error, 1 - warn (default), 2 - info, 3 - debug)")
 	flag.StringVar(&conf.policy, "p", "", "policy file to start with")
-	policyFmt := flag.String("pfmt", policyFormatNameYAML, "policy data format \"yaml\" or \"json\"")
+	flag.StringVar(&conf.policyFmt, "pfmt", policyFormatNameYAML, "policy data format \"yaml\" or \"json\"")
 	flag.Var(&conf.content, "j", "JSON content files to start with")
 	flag.StringVar(&conf.serviceEP, "l", ":5555", "listen for decision requests on this address:port")
 	flag.StringVar(&conf.controlEP, "c", ":5554", "listen for policies on this address:port")
 	flag.StringVar(&conf.tracingEP, "t", "", "OpenZipkin tracing endpoint")
 	flag.StringVar(&conf.healthEP, "health", "", "health check endpoint")
 	flag.StringVar(&conf.profilerEP, "pprof", "", "performance profiler endpoint")
-	limit := flag.Uint64("mem-limit", 0, "memory limit in megabytes")
+	flag.Uint64Var(&conf.memLimit, "mem-limit", 0, "memory limit in megabytes")
 	flag.UintVar(&conf.maxStreams, "max-streams", 0, "maximum number of parallel gRPC streams (0 - use gRPC default)")
 
 	flag.StringVar(&conf.memStatsLogPath, "mem-stats-log", "mem-stats.log", "file to log memory allocator statistics")
@@ -76,18 +79,18 @@ func init() {
 	flag.DurationVar(&conf.memProfDelay, "mem-prof-delay", 0,
 		"delay after request serving start for first memory profile dump\n"+
 			"(zero and below - dump from programm start)")
+}
 
-	flag.Parse()
-
-	initLogging(*verbose)
+func pdpInitialize() {
+	initLogging(conf.logVerbosity)
 
-	p, ok := policyParsers[strings.ToLower(*policyFmt)]
+	p, ok := policyParsers[strings.ToLower(conf.policyFmt)]
 	if !ok {
-		log.WithField("format", *policyFmt).Fatal("unknow policy format")
+		log.WithField("format", conf.policyFmt).Fatal("unknow policy format")
 	}
 	conf.policyParser = p
 
-	mem, err := server.MakeMemLimits(*limit*1024*1024, 80, 70, 30, 30)
+	mem, err := server.MakeMemLimits(conf.memLimit*1024*1024, 80, 70, 30, 30)
 	if err != nil {
 		log.WithError(err).Fatal("wrong memory limits")
 	}
diff --git a/pdpserver/main.go b/pdpserver/main.go
index 824fd2c8..f7b6599c 100644
--- a/pdpserver/main.go
+++ b/pdpserver/main.go
@@ -1,6 +1,7 @@
 package main
 
 import (
+	"flag"
 	_ "net/http/pprof"
 	"runtime"
 
@@ -10,6 +11,8 @@ import (
 )
 
 func main() {
+	flag.Parse()
+	pdpInitialize()
 	logger := log.StandardLogger()
 	logger.Info("Starting PDP server")
 
